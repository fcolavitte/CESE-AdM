//Realizar una función que reciba un vector de números signados de 32 bits y devuelva la posición del máximo del vector.

/**
 * @Note   Ejercicio 7
 * @brief  Devuelve la posición del valor máximo de un vector
 * @param  Puntero a donde comienza el vector
 * @param  Longitud del vector
 * @retval Null
 */
int32_t max (int32_t * vectorIn, uint32_t longitud){
	if(vectorIn != 0){
		uint32_t posicition = 0;
		uint32_t max = vectorIn[0]
		for(uint32_t i=1;i<longitud;i++){
			if(vectorIn[i]>max){
				posicition = i;
				max = vector[i];
			}
		}
		return position;
	}
}


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C" ejercicio 7:
@   int32_t asm_max (int32_t * vectorIn, uint32_t longitud)
@
@ Parametros recibidos:
@   r0: dirección de memoria de inicio del vector
@   r1: longitud
@ Parámetro regresado:
@   r0: posición del valor máximo del vector
@ Usos de registros:
@   r2: valor máximo encontrado
@   r3: posición del valor máximo encontrado
@   r4: valor a comparar
@   r5: posición actual
.thumb_func               		@ Se avisa al emsablador que esta es una funcion
    asm_max:            		@ Etiqueta/nombre de la función.
	push {r4-r5}				@ Guarda los registros r4 y r5 en el stack
	ldr r2,[r0]					@ Carga el valor de la posición 0 del vector en r2
	mov r3,#0					@ Posición del valor máximo encontrado = 0
	mov r5,#0					@ Posición actual = 0
	asm_max_loop:
	    add r0,#4				@ Mueve a la siguiente posición del vector
	    add r5,#1				@ Posición actual +=1
	    ldr r4,[r0]				@ Carga el valor de la posición actual del vector para comparar
	    cmp r4,r2				@ Comparo posición actual con máximo valor encontrado
	    itt hs					@ Si posición actual es mayor a máximo valor encontrado ejecutar las siguientes dos condiciones
	    	movhs r2,r4			@ Actualiza el máximo valor encotnrado
			movhs r3,r5			@ Actualiza la posición del máximo valor encontrado
		subs r1,#1				@ longitud -=1
		bne asm_max_loop
	mov r0,r3					@ Devolver la posición del máximo del vector
	pop {r4-r5}					@ Recuperar los registros guardados en el stack
	bx lr						@ Vuelve a la llamada de la función