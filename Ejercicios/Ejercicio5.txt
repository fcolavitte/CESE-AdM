//Realice una función que implemente un filtro de ventana móvil de 10 valores sobre un vector de muestras.

/**
 * @Note   Ejercicio 5
 * @brief  Realiza un filtro de ventana realizando el promedio de 5 valores a izquierda y 5 a derecha de cada valor central
 * @param  Puntero a donde comienza el vector de entrada
 * @param  Puntero a donde comienza el vector de salida
 * @param  Longitud del vector
 * @retval Null
 */
void filtroVentana10(uint16_t * vectorIn, uint16_t * vectorOut, uint32_t longitudVectorIn){
	if(vectorIn != 0 && vectorOut != 0){
		int num_muestras_izq = 0;
		int num_muestras_der = 0;
		for(int i = 0; i<longitudVectorIn; i++){
			num_muestras_izq = i<6 ? i : 5;
			num_muestras_der = i<((int)longitudVectorIn-5) ? 5 : ((int)longitudVectorIn-(i+1));
			*vectorOut = 0;
			for(int j=1;j<=num_muestras_izq;j++){
				*vectorOut += *(vectorIn - j);
			}
			for(int j=1;j<=num_muestras_der;j++){
				*vectorOut += *(vectorIn + j);
			}
			*vectorOut = *vectorOut/(num_muestras_izq+num_muestras_der);
			vectorIn++;
			vectorOut++;
		}
	}
}


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C" ejercicio 5:
@   void asm_filtroVentana10(uint16_t * vectorIn, uint16_t * vectorOut, uint32_t longitudVectorIn)
@
@ Parametros recibidos:
@   r0: dirección de memoria de inicio del vector de entrada. No se debe modificar, en su lugar usar r3 para mover en el vector
@   r1: dirección de memoria de inicio del vector de salida
@   r2: longitud
@
@ Usos de registros:
@   r3: dirección actual del elemento central de la ventana
@   r4: puntero auxiliar a elementos de la ventana
@   r5: lugares a izquierda
@   r6: lugares a derecha
@   r7: posición actual
@   r8: elemento de salida de la ventana actual
@   r9: aux para tomar elemento de una dirección
@   r10: cantidad de elementos a promediar
.thumb_func
	asm_filtroVentana10:
		push {r4-r10}
		mov r3,r0
		filtroVentana10_main_loop:
			mov r4,r3		@ Centro elemento pivot en la ventana
			mov r8,#0		@ Limpio el elemento de salida
			mov r10,#0		@ Hago cero el ancho de la ventana

			@ Cálculo de elementos a izquierda
			sub r5,r3,r0	@ Calculo los elementos a izquierda
			lsr r5,#1			@ Divido por 2 la cantidad de elementos a izqueirda ya que son elementos de 16bits
			add r5,#2	@ Le sumo 2 a la cantidad de elementos a izquierda para saturar a 7 y así obtener la saturación a 5
			usat r5,3,r5	@ Saturo a 7 la cantidad de elementos a izquierda
			subs r5,#2	@ Resto 2 y obtengo la cantidad de elementos a izquierda saturado a 5

			add r10,r5	@ Sumo los elementos a izquierda		

			filtroVentana10_calc_elemtos_a_izq:
			ITTTT NE
				subne r4,#2	@ Anterior elemento dentro de la ventana (elementos de 16bits)
				ldrhne r9,[r4]	@ Leo el elemento de de la ventana
				addne r8,r9	@ Sumo el elemento a la variable de salida
				subsne r5,#1	@ Resto 1 a la cantidad de elementos de la ventana que quedan a la izquierda
				bne filtroVentana10_calc_elemtos_a_izq

			mov r4,r3		@ Centro elemento pivot en la ventana

			@ Cálculo de elementos a derecha
			sub r6,r2,#1	@ A la cantidad de elementos que quedan en la lista le resto 1 para obtener elementos a derecha
			add r6,#2	@ A los valores a derecha le sumo 2 para saturar a 5
			usat r6,3,r6	@ Saturo a 7 para obtener saturado a 5 los valores a derecha porque sumé 2
			subs r6,#2	@ Resto 2 y obtengo la cantidad de elementos a derecha saturado a 5			
				
			add r10,r6	@ Sumo los elementos a derecha

			filtroVentana10_calc_elemtos_a_der:
				ITTTT NE
				addne r4,#2	@ Siguiente elemento dentro de la ventana (elementos de 16bits)
				ldrhne r9,[r4]	@ Leo el elemento de de la ventana
				addne r8,r9	@ Sumo el elemento a la variable de salida
				subsne r6,#1	@ Resto 1 a la cantidad de elementos de la ventana que quedan a la derecha
				bne filtroVentana10_calc_elemtos_a_der
			udiv r8,r8,r10	@divido r8/r10
			strh r8,[r1]	@ Guardo el valor en el vector de salida
			add r1,#2	@ Muevo a la siguiente posición del vector de salida
			add r3,#2	@ Muevo la ventana al siguiente elemento (16bits)
			subs r2,#1	@ Resto 1 a la cantidad de elementos restantes
			bne filtroVentana10_main_loop
		pop {r4-r10}
    	bx lr		          			@ Vuelve a la llamada de la función

