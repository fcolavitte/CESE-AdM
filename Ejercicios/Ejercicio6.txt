//Realizar una función que reciba un vector de números signados de 32 bits y los “empaquete” en otro vector de 16 bits. La función deberá adecuar los valores de entrada a la nueva precisión.

/**
 * @Note   Ejercicio 6
 * @brief  Trunca los valores del vector de 32 bits a 16
 * @param  Puntero a donde comienza el vector de entrada
 * @param  Puntero a donde comienza el vector de salida
 * @param  Longitud del vector
 * @retval Null
 */
void pack32to16 (int32_t * vectorIn, int16_t *vectorOut, uint32_t longitud){
	if(vectorIn != 0 && vectorOut != 0){
		for(uint32_t i=0;i<longitud;i++){
			*vectorOut=(int16_t)((*vectorIn)/65536);
		}
	}
}




@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C" ejercicio 6:
@   void asm_pack32to16 (int32_t * vectorIn, int16_t *vectorOut, uint32_t longitud)
@
@ Parametros recibidos:
@   r0: dirección de memoria de inicio del vector de entrada
@   r1: dirección de memoria de inicio del vector de salida
@   r2: longitud
.thumb_func
	asm_pack32to16:					@ Nombre de la función
		asm_pack32to16_loop:		@ Inicio de bucle
			ldr r3,[r0],#4			@ Carga el valor al que apunta r0 en r3 y mueve 4 bytes r0
			lsr r3,16				@ Hace desplazamiento de 16 bits a derecha
			strh r3,[r1],#2			@ Guarda r3 en la dirección donde apunta r1 y le suma 2 a r1
			subs r2,1				@ r2--; y actualiza los flags
			bne asm_pack32to16_loop	@ Se mantiene dentro del loop mientras Z!=0
		bx lr						@ Regresa a donde se llamo la función